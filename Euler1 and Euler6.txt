--Euler 1: Multiples of 3 or 5
multiple3 :: Int -> [Int]
multiple3 n = (filter (<n) (map(*3) [1..n]))

multiple5 :: Int -> [Int]
multiple5 n = (filter (<n) (map(*5) [1..n]))

multiple3or5 n = (multiple3 n) `union` (multiple5 n)

res = sum (multiple3or5 1000)



--Euler 6: Sum Square Difference

square n =n*n
squares n= map (square) [1..n]
res1 n = sum (squares n)

sumN n = sum [1..n]
res2 n = square (sumN n)

diff n = res2 n - res1 n

